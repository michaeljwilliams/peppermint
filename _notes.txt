notes:

{{$  $}}
js expression

{{[ ]}} or {{( )}}
js with output-strings in it. Parsed for output-strings, compiled into js, then evaluated

{{{ }}}
output-string with js expressions in template literal format.
The contents will be converted into a template literal in a statement that adds it to the result.



Syntax, more specifically:

{{$ $}} js expression in file scope
Input: js expression
Output: js expression evaluated in file scope
This value is trimmed of whitespace at the beginning and end before being evaluated.

{{[ ]}} js in file scope
Input: js
Output: js evaluated in the scope of the current file

{{( )}} js in local scope
Input: js
Output: js evaluated in local scope (evaluated in its own function)

Output-strings within js logic tags:
    Within these tags you can embed js expressions in template literal form: ${expression}

    {{{ }}} Unescaped string
    Input: string with js expressions in ${}
    Output: Unescaped string with values of resolved expressions

    {{! !}} html-escaped string
    Input: html with js expressions
    Output: Escaped html with values of resolved expressions

{{& &}} Include pepfile
Input: Path to another pepfile, context, options
Ouput: Parsed pepfile result



Compiler context is accessible via __Pep object

engine exposes variables for convenience
    • sitewide variables: site.foo
    • file variables: filepath.foo (current page or other page)
        - relative: 'path/to/file.html'
        - absolute (from site root) '/path/to/file.html'
